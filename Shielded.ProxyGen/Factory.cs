using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;

namespace Shielded.ProxyGen
{
    public static class Factory
    {
        /// <summary>
        /// Returns a subtype of the given type, which implements backing storage
        /// for all virtual properties (with virtual getters and setters) in one
        /// Shielded struct container. Base setters will be called before any change,
        /// and may use the getter to obtain the old value.
        /// If the class has a virtual method Commute(Action), this will be overriden
        /// and the override will perform the action as a commute.
        /// The subtype is generated once per type, and cached for future calls.
        /// </summary>
        public static Type ShieldedType(Type t)
        {
            if (NothingToDo.With(t))
                throw new InvalidOperationException(
                    "Unable to create proxy type - base type must be public and have virtual properties.");
            return ProxyGen.GetFor(t);
        }

        /// <summary>
        /// Constructs a new instance of the subtype of T generated by
        /// <see cref="ShieldedType"/>.
        /// </summary>
        public static T NewShielded<T>() where T : class
        {
            return Activator.CreateInstance(ShieldedType(typeof(T))) as T;
        }

        /// <summary>
        /// Returns true if we can generate a proxy subclass for the given type.
        /// It would be recommended not to use this when preparing types - try to
        /// prepare every type you think should be prepared. That way, if one of your
        /// types is not OK, you will get an exception at preparation time, rather
        /// than later, when some piece of code tries to use the factory to construct
        /// one of those types.
        /// </summary>
        public static bool CanGenerateProxy(Type t)
        {
            return !NothingToDo.With(t);
        }

        /// <summary>
        /// Prepares proxy subclasses for given types, all in one new assembly. (Normally,
        /// when doing one by one, each gets its own assembly.) If any of the types is
        /// not suitable, you will get an <see cref="InvalidOperationException"/>.
        /// </summary>
        public static void PrepareTypes(Type[] types)
        {
            if (types.Any(NothingToDo.With))
                throw new InvalidOperationException(
                    "Unable to make proxies for types: " +
                    types.Where(NothingToDo.With)
                        .Aggregate(
                            new StringBuilder(),
                            (sb, t) => sb.Length > 0 ? sb.Append(", " + t.FullName) : sb.Append(t.FullName))
                        .ToString());

            ProxyGen.Prepare(types);
        }
    }
}
