using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Shielded.ProxyGen
{
    public static class Factory
    {
        /// <summary>
        /// Returns a subtype of the given type, which implements backing storage
        /// for all virtual properties (with virtual getters and setters) in one
        /// Shielded struct container. Base setters will be called before any change,
        /// and may use the getter to obtain the old value.
        /// If the class has a virtual method Commute(Action), this will be overriden
        /// and the override will perform the action as a commute.
        /// The subtype is generated once per type, and cached for future calls.
        /// </summary>
        public static Type ShieldedType(Type t)
        {
            if (NothingToDo.With(t))
                throw new InvalidOperationException(
                    "Unable to create proxy type - base type must be public and have virtual properties.");
            return ProxyGen.GetFor(t);
        }

        /// <summary>
        /// Constructs a new instance of the subtype of T generated by
        /// <see cref="ShieldedType"/>.
        /// </summary>
        public static T NewShielded<T>() where T : class
        {
            return Activator.CreateInstance(ShieldedType(typeof(T))) as T;
        }
    }
}
